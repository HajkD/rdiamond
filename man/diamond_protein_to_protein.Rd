% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diamond_protein_to_protein.R
\name{diamond_protein_to_protein}
\alias{diamond_protein_to_protein}
\title{Perform Protein to Protein DIAMOND Searches (BLASTP)}
\usage{
diamond_protein_to_protein(
  query,
  subject,
  output_path = NULL,
  is_subject_db = FALSE,
  task = "blastp",
  sensitivity_mode = "ultra-sensitive",
  db_import = FALSE,
  postgres_user = NULL,
  evalue = 0.001,
  out_format = "csv",
  cores = 1,
  max_target_seqs = 500,
  hard_mask = TRUE,
  diamond_exec_path = NULL,
  add_makedb_options = NULL,
  add_diamond_options = NULL
)
}
\arguments{
\item{query}{path to input file in fasta format.}

\item{subject}{path to subject file in fasta format or blast-able database.}

\item{output_path}{path to folder at which DIAMOND output table shall be stored.
Default is \code{output.path = NULL} (hence \code{getwd()} is used).}

\item{is_subject_db}{logical specifying whether or not the \code{subject} file is a file in fasta format (\code{is.subject.db = FALSE}; default)
or a \code{fasta} file that was previously converted into a blast-able database using \code{makeblastdb} (\code{is.subject.db = TRUE}).}

\item{task}{protein search task option. Options are:
\itemize{
\item \code{task = "blastp"} : Standard protein-protein comparisons (default).
}}

\item{sensitivity_mode}{specify the level of alignment sensitivity. The higher the sensitivity level, the more deep homologs can be found, but at the cost of reduced computational speed.
\itemize{
  \item \code{sensitivity_mode = "fast"} : fastest alignment mode, but least sensitive (default).
  \item \code{sensitivity_mode = "more-sensitive"} : second fastest alignment mode, but second least sensitive.
  \item \code{sensitivity_mode = "very-sensitive"} : sensitive alignment mode.
  \item \code{sensitivity_mode = "ultra-sensitive"} : most sensitive alignment mode (sensitivity as high as BLASTP).
}}

\item{db_import}{shall the DIAMOND hit output be stored in a PostgresSQL database and shall a connection be established to this database? Default is \code{db_import = FALSE}.
In case users wish to to only generate a DIAMOND output file without importing it to the current R session they can specify \code{db_import = NULL}.}

\item{postgres_user}{when \code{db_import = TRUE} and \code{out_format = "postgres"} is selected, the DIAMOND output is imported and stored in a
PostgresSQL database. In that case, users need to have PostgresSQL installed and initialized on their system.
Please consult the Installation Vignette for details.}

\item{evalue}{Expectation value (E) threshold for saving hits (default: \code{evalue = 0.001}).}

\item{out_format}{a character string specifying the format of the file in which the DIAMOND results shall be stored.
Available options are:
 \itemize{
 \item \code{out_format = "pair"} : Pairwise
 \item \code{out_format = "xml"} : XML
 \item \code{out_format = "csv"} : Comma-separated file
 }}

\item{cores}{number of cores for parallel BLAST searches.}

\item{max_target_seqs}{maximum number of aligned sequences that shall be retained. Please be aware that \code{max_target_seqs} selects best hits based on the database entry and not by the best e-value. See details here: https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/bty833/5106166 .}

\item{hard_mask}{shall low complexity regions be hard masked with TANTAN? Default is \code{db_hard_mask = TRUE}.}

\item{diamond_exec_path}{a path to the DIAMOND executable or \code{conda/miniconda} folder.}

\item{add_makedb_options}{a character string specifying additional makedb options that shall be passed on to the diamond makedb command line call, e.g. \code{add_make_options = "--taxonnames"} (Default is \code{add_diamond_options = NULL}).}

\item{add_diamond_options}{a character string specifying additional diamond options that shall be passed on to the diamond command line call, e.g. \code{add_diamond_options = "--block-size 4.0 --compress 1 --no-self-hits"} (Default is \code{add_diamond_options = NULL}).}
}
\description{
Run protein to protein DIAMOND of reference sequences
against a blast-able database or fasta file.
}
\examples{
\dontrun{
# run diamond assuming that the diamond executable is available
# via the system path ('diamond_exec_path = NULL') and using
# sensitivity_mode = "ultra-sensitive"
diamond_example <- diamond_protein_to_protein(
              query   = system.file('seqs/qry_aa.fa', package = 'rdiamond'),
              subject = system.file('seqs/sbj_aa.fa', package = 'rdiamond'),
              sensitivity_mode = "ultra-sensitive",
              output_path = tempdir(),
              db_import  = FALSE)

# look at DIAMOND results
diamond_example

# run diamond assuming that the diamond executable is available
# via the miniconda path ('diamond_exec_path = "/opt/miniconda3/bin/"')
# and using 2 cores as well as sensitivity_mode = "ultra-sensitive"
diamond_example_conda <- diamond_protein_to_protein(
query   = system.file('seqs/qry_aa.fa', package = 'rdiamond'),
subject = system.file('seqs/sbj_aa.fa', package = 'rdiamond'),
sensitivity_mode = "ultra-sensitive", diamond_exec_path = "/opt/miniconda3/bin/",
output_path = tempdir(),
db_import  = FALSE, cores = 2)

# look at DIAMOND results
diamond_example_conda

# run diamond assuming that the diamond executable is available
# via the system path ('diamond_exec_path = NULL') and using
# sensitivity_mode = "ultra-sensitive" and adding command line options:
# "--block-size 4.0 --compress 1 --no-self-hits"
diamond_example_ultra_sensitive_add_diamond_options <- diamond_protein_to_protein(
query   = system.file('seqs/qry_aa.fa', package = 'rdiamond'),
subject = system.file('seqs/sbj_aa.fa', package = 'rdiamond'),
sensitivity_mode = "ultra-sensitive",
max_target_seqs = 500,
output_path = tempdir(),
db_import  = FALSE,
add_diamond_options = "--block-size 4.0 --compress 1 --no-self-hits",
cores = 1
)

# look at DIAMOND results
diamond_example_ultra_sensitive_add_diamond_options

# run diamond assuming that the diamond executable is available
# via the system path ('diamond_exec_path = NULL') and using
# sensitivity_mode = "ultra-sensitive" and adding makedb command line options:
# "--taxonnames"
diamond_example_ultra_sensitive_add_makedb_options <- diamond_protein_to_protein(
query   = system.file('seqs/qry_aa.fa', package = 'rdiamond'),
subject = system.file('seqs/sbj_aa.fa', package = 'rdiamond'),
sensitivity_mode = "ultra-sensitive",
max_target_seqs = 500,
output_path = tempdir(),
db_import  = FALSE,
add_makedb_options = "--taxonnames",
cores = 1
)

# look at DIAMOND results
diamond_example_ultra_sensitive_add_makedb_options
}

}
\author{
Hajk-Georg Drost
}
